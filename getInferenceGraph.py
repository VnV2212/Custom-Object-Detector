# -*- coding: utf-8 -*-
"""customObjDetector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11w2YU2FxVq78X9-M8ynvC_o9Z6ALxGAM
"""

pip install tensorflow==1.14

# Commented out IPython magic to ensure Python compatibility.
# Get the tensorflow API for object detection

!apt-get install protobuf-compiler python-pil python-lxml python-tk
!pip install Cython
#!pip install jupyter
#!pip install matplotlib

!git clone https://github.com/tensorflow/models.git

# %cd /content/models/research

!protoc object_detection/protos/*.proto --python_out=.

# %set_env PYTHONPATH=/content/models/research:/content/models/research/slim

!python object_detection/builders/model_builder_test.py

from google.colab import drive
import zipfile

drive.mount('/content/drive/')

#load training images with their XML files from drive
zip_ref = zipfile.ZipFile("/content/drive/My Drive/train.zip", 'r')
zip_ref.extractall("/content/workspace/training_demo/images")
zip_ref.close()

#load testing images with their XML files from drive
zip_ref = zipfile.ZipFile("/content/drive/My Drive/test.zip", 'r')
zip_ref.extractall("/content/workspace/training_demo/images")
zip_ref.close()

# !rm -rf '/content/Tensorflow/models'

#Converting training files from XML to CSV

import os
import glob
import pandas as pd
import argparse
import xml.etree.ElementTree as ET

def xml_to_csv(path):
    xml_list = []
    for xml_file in glob.glob(path + '/*.xml'):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall('object'):
            value = (root.find('filename').text,
                    int(root.find('size')[0].text),
                    int(root.find('size')[1].text),
                    member[0].text,
                    int(member[4][0].text),
                    int(member[4][1].text),
                    int(member[4][2].text),
                    int(member[4][3].text)
                    )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height',
                'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df

assert(os.path.isdir('/content/workspace/training_demo/images/train'))

xml_df = xml_to_csv('/content/workspace/training_demo/images/train')
xml_df.to_csv(
        '/content/workspace/training_demo/annotations/train_labels.csv', index=None)
print('Successfully converted xml to csv.')

#Converting testing files from XML to CSV

assert(os.path.isdir('/content/workspace/training_demo/images/test'))

xml_df = xml_to_csv('/content/workspace/training_demo/images/test')
xml_df.to_csv(
        '/content/workspace/training_demo/annotations/test_labels.csv', index=None)
print('Successfully converted xml to csv.')

#Converting training files from CSV to TFRecords

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

import os
import io
import pandas as pd
import tensorflow as tf
import sys
sys.path.append("../../models/research")

from PIL import Image
from object_detection.utils import dataset_util
from collections import namedtuple, OrderedDict

def class_text_to_int(row_label):
    if row_label == 'tomato':
      return 0
    elif row_label == 'banana':
      return 1
    elif row_label == 'onion':
      return 2
    else:
        None


def split(df, group):
    data = namedtuple('data', ['filename', 'object'])
    gb = df.groupby(group)
    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


def create_tf_example(group, path):
    with tf.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:
        encoded_jpg = fid.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)
    image = Image.open(encoded_jpg_io)
    width, height = image.size

    filename = group.filename.encode('utf8')
    image_format = b'jpg'
    # check if the image format is matching with your images.
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in group.object.iterrows():
        xmins.append(row['xmin'] / width)
        xmaxs.append(row['xmax'] / width)
        ymins.append(row['ymin'] / height)
        ymaxs.append(row['ymax'] / height)
        classes_text.append(row['class'].encode('utf8'))
        classes.append(class_text_to_int(row['class']))

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': dataset_util.int64_feature(height),
        'image/width': dataset_util.int64_feature(width),
        'image/filename': dataset_util.bytes_feature(filename),
        'image/source_id': dataset_util.bytes_feature(filename),
        'image/encoded': dataset_util.bytes_feature(encoded_jpg),
        'image/format': dataset_util.bytes_feature(image_format),
        'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),
        'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),
        'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),
        'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),
        'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
        'image/object/class/label': dataset_util.int64_list_feature(classes),
    }))
    return tf_example

writer = tf.python_io.TFRecordWriter('/content/workspace/training_demo/annotations/train.record')
path = os.path.join(os.getcwd(), '/content/workspace/training_demo/images/train')
examples = pd.read_csv('/content/workspace/training_demo/annotations/train_labels.csv')
grouped = split(examples, 'filename')
for group in grouped:
  tf_example = create_tf_example(group, path)
  writer.write(tf_example.SerializeToString())

writer.close()
output_path = os.path.join(os.getcwd(), '/content/workspace/training_demo/annotations/train.record')
print('Successfully created the TFRecords: {}'.format('/content/workspace/training_demo/annotations/train.record'))

#Converting training files from CSV to TFRecords

writer = tf.python_io.TFRecordWriter('/content/workspace/training_demo/annotations/test.record')
path = os.path.join(os.getcwd(), '/content/workspace/training_demo/images/test')
examples = pd.read_csv('/content/workspace/training_demo/annotations/test_labels.csv')
grouped = split(examples, 'filename')
for group in grouped:
  tf_example = create_tf_example(group, path)
  writer.write(tf_example.SerializeToString())

writer.close()
output_path = os.path.join(os.getcwd(), '/content/workspace/training_demo/annotations/test.record')
print('Successfully created the TFRecords: {}'.format('/content/workspace/training_demo/annotations/test.record'))

#loading the pre-trained model from drive

zip_ref = zipfile.ZipFile("/content/drive/My Drive/ssd_inception_v2_coco.zip", 'r')
zip_ref.extractall("/content/workspace/training_demo/pre-trained-model")
zip_ref.close()

zip_ref = zipfile.ZipFile("/content/drive/My Drive/ssd_inception_v2_coco2.zip", 'r')
zip_ref.extractall("/content/workspace/training_demo/pre-trained-model")
zip_ref.close()

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/workspace/training_demo

#configure pipeline and start training
!python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssd_inception_v2_coco.config

#Create inference graph from checkpoint

!python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/ssd_inception_v2_coco.config --trained_checkpoint_prefix training/model.ckpt-1275 --output_directory trained-inference-graphs/output_inference_graph_v1.pb